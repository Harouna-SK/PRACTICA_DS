' Generated by UML Generator
' Encoded: lLVVJniv47xFNs7HXovj5l5OHRseAT23NY28WD3fTAhChW5VDdREzXBbUjpVtXbxxVKwcw9xeGzqFVx6y-lpZFD96wfClQm6Ui75YYgw94L5jPuOe_XTRTXP8SMS_yF8uU2HbumKN1KL6mmiYjo8IXOBLiuVfJBLXdmV4F8-4MQbb6f4Zk7lFcxB5HFP_eWyILxYkgYaPh40jUDrBVeb_do_yUozkcLtSwQUcBB-vDyXICEBPt8vkxeU4IuC-OLyEFnmsDcybsf9ZM7eAZNicY_P5oy2_9RiGDvVsW-HxMtWNtv-dfVbs-ktfwUZvN8FGyrpT3Pua-stBiunG-RwKJ5QEY-vq3PhesRFw_yNGxC6PJpAPbJLSKBp9LsmA_PtpRJ9Z5mmeG4DvHGFV_m9i6OhGLx1wU3YRhm395eJSEedEhZjDKwj_aJeDMR2e_tkLor5iwUSRZYanKBsw9qsYXR6iTIIQWu5P3Q7RrgcuKhG9Oljs6e4ZOYMGn93RKeVcBa0MSVHLs0kUjFGeOnTjvP0SYTbnQX04VAMZTeCeEnUoUM8-AmRsNuNZwnOJ22fKrdGofCPU2tggaB0cd83ne3Uazf8G2s2DK3TqqgpJWwpri4XQUqEYRTgqxXIic1QUpQcfNMSYgXRoabXk1GPjV-5ahG9rCouyWcsdYSfY61S7zcKOOhRfA5s8qyo6gb2wS_ARk4V6gFRb82TQucY9j4e-0BPY4NGNXQPaEia-P598zs9tREDn5k1ig_psSNixYzMc9OgvvGBrsz32rk2AAFgeNiNkmnp-TM9vdHsz9jNWdBl8KdtEeYRYnJZgDo7-ZO_XKux_NqR_KqxvdUrPfSd5p4MxraNSJITpKzYY2tVNdHnk8BiIBMvqKpffE_NACDwABgPScq-8cYCv6VhI3hEzZjg3qhMguxUhoZPgPWdnLWmwqny_TjfmqM9kvytHugLJ1XEgwm8dn7n4TN6YIiNNThTjfLHQcCO4Uiuhcbje08mpylvYiBL14vY17On3a6WbImsC2JRnm_9JmyRajYsRwfHj0dN-su0A5XjbFeG-bjpGSLdTYQiwKmt7QYz-Y5_bqgkLioDtFVD8dsWz1fukRM_E1rUwFqsmFxQqggIQrOsTpTcfCEC8v0lHOG9nTKm1igwmhERhr1ob-TkpLyq6o2xZ0x9jidTEGRXf6FITT7jM2Eaivm0VS2sSJTchQasQcJC9LFuwak63GG5vF7Zh6owzNRptk9Mw4789En1OMTgNtQETExxzH_5FdR7CFlkFxRZCyI5SYRA7kaJhJZ8D_w6m-Vi_fQnnJYSTIfhrMXXVfgpUgIMRQ4eVNuCoRONGxBR1o1PZmVsb4Isxvu6jzmySX5y-1ybjg-0lk5vSfoEJrRsZSOkhXOU-Pp-ekh-b7fDkgI_wVBytt7qp4ot3mxSxg1zY-Tv92BlyZnIJmQrX4qxuNhahkFRYVSkB7q3Jxpouk2DwwQe5ovzSmiJpKOQ54C1TiJT8Zy1mU2dymy
' URL: http://www.plantuml.com/plantuml/uml/lLVVJniv47xFNs7HXovj5l5OHRseAT23NY28WD3fTAhChW5VDdREzXBbUjpVtXbxxVKwcw9xeGzqFVx6y-lpZFD96wfClQm6Ui75YYgw94L5jPuOe_XTRTXP8SMS_yF8uU2HbumKN1KL6mmiYjo8IXOBLiuVfJBLXdmV4F8-4MQbb6f4Zk7lFcxB5HFP_eWyILxYkgYaPh40jUDrBVeb_do_yUozkcLtSwQUcBB-vDyXICEBPt8vkxeU4IuC-OLyEFnmsDcybsf9ZM7eAZNicY_P5oy2_9RiGDvVsW-HxMtWNtv-dfVbs-ktfwUZvN8FGyrpT3Pua-stBiunG-RwKJ5QEY-vq3PhesRFw_yNGxC6PJpAPbJLSKBp9LsmA_PtpRJ9Z5mmeG4DvHGFV_m9i6OhGLx1wU3YRhm395eJSEedEhZjDKwj_aJeDMR2e_tkLor5iwUSRZYanKBsw9qsYXR6iTIIQWu5P3Q7RrgcuKhG9Oljs6e4ZOYMGn93RKeVcBa0MSVHLs0kUjFGeOnTjvP0SYTbnQX04VAMZTeCeEnUoUM8-AmRsNuNZwnOJ22fKrdGofCPU2tggaB0cd83ne3Uazf8G2s2DK3TqqgpJWwpri4XQUqEYRTgqxXIic1QUpQcfNMSYgXRoabXk1GPjV-5ahG9rCouyWcsdYSfY61S7zcKOOhRfA5s8qyo6gb2wS_ARk4V6gFRb82TQucY9j4e-0BPY4NGNXQPaEia-P598zs9tREDn5k1ig_psSNixYzMc9OgvvGBrsz32rk2AAFgeNiNkmnp-TM9vdHsz9jNWdBl8KdtEeYRYnJZgDo7-ZO_XKux_NqR_KqxvdUrPfSd5p4MxraNSJITpKzYY2tVNdHnk8BiIBMvqKpffE_NACDwABgPScq-8cYCv6VhI3hEzZjg3qhMguxUhoZPgPWdnLWmwqny_TjfmqM9kvytHugLJ1XEgwm8dn7n4TN6YIiNNThTjfLHQcCO4Uiuhcbje08mpylvYiBL14vY17On3a6WbImsC2JRnm_9JmyRajYsRwfHj0dN-su0A5XjbFeG-bjpGSLdTYQiwKmt7QYz-Y5_bqgkLioDtFVD8dsWz1fukRM_E1rUwFqsmFxQqggIQrOsTpTcfCEC8v0lHOG9nTKm1igwmhERhr1ob-TkpLyq6o2xZ0x9jidTEGRXf6FITT7jM2Eaivm0VS2sSJTchQasQcJC9LFuwak63GG5vF7Zh6owzNRptk9Mw4789En1OMTgNtQETExxzH_5FdR7CFlkFxRZCyI5SYRA7kaJhJZ8D_w6m-Vi_fQnnJYSTIfhrMXXVfgpUgIMRQ4eVNuCoRONGxBR1o1PZmVsb4Isxvu6jzmySX5y-1ybjg-0lk5vSfoEJrRsZSOkhXOU-Pp-ekh-b7fDkgI_wVBytt7qp4ot3mxSxg1zY-Tv92BlyZnIJmQrX4qxuNhahkFRYVSkB7q3Jxpouk2DwwQe5ovzSmiJpKOQ54C1TiJT8Zy1mU2dymy
' Generated on: 2025-10-19T17:44:33.510207015

@startuml
skinparam classAttributeIconSize 0
hide circle

class UnlockedShortly {
  +UnlockedShortly(door: Door)
  +open(): void
  +close(): void
  +lock(): void
  +unlock(): void
  +unlockShortly(): void
}

class WebServer {
  -{static} PORT: int = 8080
  -{static} formatter: DateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm")
  --
  +WebServer()
}

class SocketThread {
  -insocked: Socket
  --
  ~SocketThread(insocket: Socket)
  +run(): void
  -makeRequest(tokens: String[]): Request
  -makeRequestReader(tokens: String[]): RequestReader
  -makeRequestArea(tokens: String[]): RequestArea
  -makeHeaderAnswer(): String
  -makeJsonAnswer(request: Request): String
}

abstract class DoorState {
  #door: Door
  #name: String
  --
  +DoorState(door: Door, name: String)
  +getName(): String
  +open(): void
  +close(): void
  +lock(): void
  +unlock(): void
  +unlockShortly(): void
}

class Door {
  -id: String
  -closed: boolean
  -state: DoorState
  -from: Area
  -to: Area
  -checkAt: LocalDateTime = null
  -waitingForAutoLock: boolean = false
  --
  +Door(id: String, from: Area, to: Area)
  +processRequest(request: RequestReader): void
  -doAction(action: String): void
  +setState(newState: DoorState): void
  +isClosed(): boolean
  +setClosed(closed: boolean): void
  +getId(): String
  +getStateName(): String
  +getTo(): Area
  +getFrom(): Area
  +tick(now: LocalDateTime): void
  +toString(): String
  +toJson(): JSONObject
}

class Main {
  +{static} main(args: String[]): void
}

class Actions {
  +{static} LOCK: String = "lock"
  +{static} UNLOCK: String = "unlock"
  +{static} UNLOCK_SHORTLY: String = "unlock_shortly"
  +{static} OPEN: String = "open"
  +{static} CLOSE: String = "close"
}

class DirectoryUsers {
  -{static} users: ArrayList<User> = new ArrayList<>()
  -{static} groups: ArrayList<Group> = new ArrayList<>()
  --
  +{static} makeUsers(): void
  +{static} findUserByCredential(credential: String): User
}

class User {
  -name: String
  -credential: String
  -group: Group
  -authorizedSpaces: List<Space>
  --
  +User(name: String, credential: String, authorizedSpaces: List<Space>, group: Group)
  +getCredential(): String
  +toString(): String
  +getGroup(): Group
  +getName(): String
  +canBeInSpace(s: Area): boolean
}

class Propped {
  +Propped(door: Door)
  +getName(): String
  +lock(): void
  +unlock(): void
  +open(): void
  +close(): void
  +unlockShortly(): void
}

class Group {
  -name: String
  -allowedActions: ArrayList<String>
  -allowedSpaces: ArrayList<Space>
  -schedule: Schedule
  --
  +Group(name: String, allowedActions: ArrayList<String>, allowedSpaces: ArrayList<Space>, schedule: Schedule)
  +getName(): String
  +getAllowedActions(): ArrayList<String>
  +getAllowedSpaces(): ArrayList<Space>
  +getSchedule(): Schedule
  +canPerform(action: String, area: Area, dateTime: LocalDateTime): boolean
}

class DirectoryDoors {
}

class Locked {
  +Locked(door: Door)
  +open(): void
  +close(): void
  +lock(): void
  +unlock(): void
  +unlockShortly(): void
}

class Schedule {
  -startDate: LocalDate
  -endDate: LocalDate
  -validDays: List<DayOfWeek>
  -startHour: LocalTime
  -endHour: LocalTime
  --
  +Schedule(startDate: LocalDate, endDate: LocalDate, validDays: List<DayOfWeek>, startHour: LocalTime, endHour: LocalTime)
  +isWithinSchedule(dateTime: LocalDateTime): boolean
}

class States {
  +{static} LOCKED: String = "locked"
  +{static} UNLOCKED: String = "unlocked"
}

class Unlocked {
  +Unlocked(door: Door)
  +open(): void
  +close(): void
  +lock(): void
  +unlock(): void
  +unlockShortly(): void
}

UnlockedShortly --|> DoorState
UnlockedShortly ..> Door
DoorState --> Door
Door *-- DoorState
DirectoryUsers o-- User
DirectoryUsers o-- Group
User *-- Group
Propped --|> DoorState
Propped ..> Door
Group *-- Schedule
Locked --|> DoorState
Locked ..> Door
Unlocked --|> DoorState
Unlocked ..> Door
@enduml